Skip to main content
Unsaved changes since 3:39â€¯PM
Functions With Arguments - Lab
Introduction
In this lesson, we have decided to visit one of our travel destinations! This time we have chosen to visit Albuquerque, but we aren't very familiar with this city and are quite hungry after our long flight. We will be working with information we pulled from the Yelp database to help us find a restaurant where we can satisfy our hunger. While Yelp is great for learning about what to do in Albuquerque, it gives us back a lot of information. We'll use what we know about functions and dictionaries to format and read our data more easily.

Objectives
You will be able to:

Declare and use a function with arguments
Exploring Two Restaurants in Albuquerque
Let's take a quick look at the information Yelp provides for a single restaurant:


[1]
0s
# Run this cell without changes
fork_fig = {'categories': [{'alias': 'burgers', 'title': 'Burgers'},
  {'alias': 'sandwiches', 'title': 'Sandwiches'},
  {'alias': 'salad', 'title': 'Salad'}],
 'coordinates': {'latitude': 35.10871, 'longitude': -106.56739},
 'display_phone': '(505) 881-5293',
 'distance': 3571.724649307866,
 'id': 'fork-and-fig-albuquerque',
 'image_url': 'https://s3-media1.fl.yelpcdn.com/bphoto/_-DpXKfS3jv6DyA47g6Fxg/o.jpg',
 'is_closed': False,

Above is the information provided about Fork & Fig, but all restaurants are provided with this information. For example, here is the information provided by Yelp for another restaurant, Frontier Restaurant.


[4]
0s
# Run this cell without changes
frontier_restaurant = {'categories': [{'alias': 'mexican', 'title': 'Mexican'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'coordinates': {'latitude': 35.0808088832532, 'longitude': -106.619402244687},
 'display_phone': '(505) 266-0550',
 'distance': 4033.6583235266075,
 'id': 'frontier-restaurant-albuquerque-2',
 'image_url': 'https://s3-media4.fl.yelpcdn.com/bphoto/M9L2z6-G0NobuDJ6YTh6VA/o.jpg',
 '
As we already know, one way to quickly view the attributes of a dictionary is to look at the keys of the dictionary.


[2]
0s
# Run this cell without changes
fork_fig.keys()
dict_keys(['categories', 'coordinates', 'display_phone', 'distance', 'id', 'image_url', 'is_closed', 'location', 'name', 'phone', 'price', 'rating', 'review_count', 'transactions', 'url'])

[5]
0s
# Run this cell without changes
frontier_restaurant.keys()
dict_keys(['categories', 'coordinates', 'display_phone', 'distance', 'id', 'image_url', 'is_closed', 'location', 'name', 'phone', 'price', 'rating', 'review_count', 'transactions', 'url'])

[6]
0s
# Run this cell without changes
fork_fig.keys() == frontier_restaurant.keys()
True
As we can see from our above comparison, Yelp provides us with the same information for both restaurants.

Writing Functions to Extract Information
Ok, now let's write our functions.

Write a function called restaurant_name() that, provided a dictionary representing a restaurant like you saw above, returns that restaurant's name.


[66]
0s
def restaurant_name(restaurant):
  return restaurant['name']
    # Replace None with appropriate code

[67]
0s
# Run this cell without changes
restaurant_name(frontier_restaurant)

 # 'Frontier Restaurant'


[68]
0s
# Run this cell without changes
restaurant_name(fork_fig) # 'Fork & Fig'

Now write a function called restaurant_rating() that returns the rating of the provided restaurant.


[69]
0s
def restaurant_rating(restaurant):
  return restaurant['rating']
    # Replace None with appropriate code

[70]
0s
# Run this cell without changes
restaurant_rating(frontier_restaurant) # 4.0
4.0

[71]
0s
# Run this cell without changes
restaurant_rating(fork_fig) # 4.5
4.5
Comparing Restaurants
Now let's write a function called is_better() that returns True if a restaurant has a higher rating than an alternative restaurant. The first argument should be called restaurant and the second argument should be called alternative. The function returns False if the two ratings are equal.

This function should call (AKA invoke) your existing restaurant_rating function.


[40]
0s
def is_better(restaurant, alternative):
    # Replace None with appropriate code
    # Get the rating for both the restaurant and the alternative
    restaurant_rating_value = restaurant_rating(restaurant)
    alternative_rating_value = restaurant_rating(alternative)
    
    # Return True if restaurant rating is higher, otherwise False
    if restaurant_rating_value > alternative_rating_value:
        return True
    else:
        return False

[41]
0s
# Run this cell without changes
is_better(frontier_restaurant, fork_fig) # False
False

[42]
0s
# Run this cell without changes
is_better(fork_fig, frontier_restaurant) # True
True

[43]
0s
# Run this cell without changes
is_better(fork_fig, fork_fig) # False
False
Now let's write a function called is_cheaper() that returns True if a restaurant has a lower price, that is the restaurant has fewer '$' signs, than an alternative restaurant. The first argument should be called restaurant and the second argument should be called alternative. The function returns False if the two prices are equal.

Hint: Strings in Python respond to then len function.


[44]
0s
def is_cheaper(restaurant, alternative):
    # Get the price levels of both restaurants
    restaurant_price = restaurant['price']
    alternative_price = alternative['price']
    
    # Return True if restaurant's price is cheaper (fewer '$'), otherwise False
    if len(restaurant_price) < len(alternative_price):
        return True
    else:
        return False
    

[45]
0s
# Run this cell without changes
is_cheaper(fork_fig, frontier_restaurant) # False
False

[46]
0s
# Run this cell without changes
is_cheaper(frontier_restaurant, fork_fig) # True
True

[47]
0s
# Run this cell without changes
is_cheaper(fork_fig, fork_fig) # False
False
Now write a function called high_rating() that takes a restaurant as a first argument and a rating (in the form of a number) as the second argument and returns True if the given restaurant's rating is greater than or equal to the provided rating and returns False otherwise.


[48]
0s
def high_rating(restaurant, rating):
    # Get the restaurant's rating
    restaurant_rating_value = restaurant['rating']
    
    # Return True if the restaurant's rating is greater than or equal to the given rating
    if restaurant_rating_value >= rating:
        return True
    else:
        return False

[49]
0s
# Run this cell without changes
high_rating(fork_fig, 4) # True
True

[50]
0s
# Run this cell without changes
high_rating(fork_fig, 5) # False
False

[51]
0s
# Run this cell without changes
high_rating(frontier_restaurant, 4) # True
True
Awesome! We have built out some pretty cool functions so far. Let's now think about a case where we have more than just two data points to operate on. We have added some more restaurant dictionaries below and are going to add them to our list of restaurants. Don't worry that they have a slightly different amount of data.

We are going to need a function mean_review_count() to give us an idea what the typical value for review_count is. This function should take in a list of restaurant dictionaries and return the mean of the review counts for the collection of restaurant dictionaries.


[52]
0s
# Run this cell without changes
dennys = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'is_closed': False,
 'name': "Denny's",
 'price': '$',
 'rating': 3.0,
 'review_count': 1200}

ihop = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'is_closed': False,
 'name': "IHOP: International House of Pancakes",
 'price': '$',
 'rating': 3.45,
 'review_count': 1588}

mcdonalds = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'burgers', 'title': 'Burgers'},
  {'alias': 'fast food', 'title': 'Good Food Fast'}],
 'is_closed': False,
 'name': "McDonalds",
 'price': '$',
 'rating': 3.45,
 'review_count': 2455}

pearl_street_oyster_bar = {'categories': [{'alias': 'seafood', 'title': 'Seafood'},
  {'alias': 'gourmet', 'title': 'Gourmet'},
  {'alias': 'Shellfish', 'title': 'Shellfish'}],
 'is_closed': False,
 'name': "Pear Street Oyster Bar",
 'price': '$$$',
 'rating': 4.75,
 'review_count': 350}

[53]
0s
# Run this cell without changes
restaurant_list = [pearl_street_oyster_bar, mcdonalds, ihop, dennys, fork_fig, frontier_restaurant]

[58]
0s
def mean_review_count(list_of_restaurants):
     # Initialize a variable to store the total review count
    total_reviews = 0
    
    # Loop through each restaurant in the list and sum up the review counts
    for restaurant in restaurant_list:
        total_reviews += restaurant['review_count']
    
    # Calculate the mean by dividing the total review count by the number of restaurants
    mean_reviews = total_reviews / len(restaurant_list)
    
    return mean_reviews

[59]
0s
# Run this cell without changes
mean_review_count(restaurant_list) #1261.0
1261.0
Now we have an idea of how many reviews a typical restaurant has, but none of these restaurants have exactly that number of reviews.

Which restaurants have a review_count within 150 of the average? ("within 150" meaning exactly average, <= 150 fewer reviews than the average, or <= 150 more reviews than the average)

Return a list of the restaurant names.


[64]
0s
def near_average_review_count(list_of_restaurants):
    mean = mean_review_count(list_of_restaurants)
    # Initialize an empty list to store the names of qualifying restaurants
    qualifying_restaurants = []
    
    # Loop through each restaurant and check if its review count is within 150 of the mean
    for restaurant in restaurant_list:
        review_count = restaurant['review_count']
        if abs(review_count - mean) <= 150:
            qualifying_restaurants.append(restaurant['name'])
    
    return qualifying_restaurants

[65]
0s
# Run this cell without changes
near_average_review_count(restaurant_list) # ["Denny's", 'Frontier Restaurant']
["Denny's", 'Frontier Restaurant']
Summary
Great! In this lab we saw how to pass both single and multiple arguments to functions. Function arguments can make functions more flexible and reusable!

Colab paid products - Cancel contracts here

  0s
completed at 4:52â€¯PM
